write.csv(miRNA_Sig_De, "miRNA_Sig_De.csv")
# VolcanoPlot
library(EnhancedVolcano)
EnhancedVolcano(results, x = "log2FoldChange", y = "padj", lab = results$miRNA,
pCutoff = 0.05, FCcutoff = 1, legendIconSize = 5, title = NULL,
subtitle = NULL, gridlines.major = FALSE, gridlines.minor = FALSE, selectLab = FALSE, legendLabels = c("NS", "FC", "pval", "FC&pval"))
write.csv(miRNA, "Rasagiline_2023_Trimmed.csv")
write.csv(results, "results.csv")
# heatmap
library(pheatmap)
select <- counts(dds, normalized = TRUE)
select <- select[rownames(select) %in% rownames(miRNA_Sig_In) | rownames(select) %in% rownames(miRNA_Sig_De), ]
col_even <- seq_len(ncol(select)) %% 2
pre <- select[,col_even == 1]
post <- select[,col_even == 0]
RE_miRNA <- cbind(pre, post)
mat_z <- t(apply(RE_miRNA, 1, scale))
paletteLength <- 50
myColor <- colorRampPalette(c("royalblue3", "white", "red"))(paletteLength)
# length(breaks) == length(paletteLength) + 1
# use floor and ceiling to deal with even/odd length pallettelengths
myBreaks <- c(seq(min(mat_z), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(mat_z)/paletteLength, max(mat_z), length.out=floor(paletteLength/2)))
# Plot the heatmap
pheatmap(mat_z, cluster_cols = F, color=myColor, breaks=myBreaks, show_rownames = F, show_colnames = T)
pca_result <- plotPCA(dds, intgroup = "your_conditions", returnData = TRUE)
pca_result <- plotPCA(dds, intgroup = "Time", returnData = TRUE)
pca_result <- plotPCA(res, intgroup = "Time", returnData = TRUE)
pca_result <- plotPCA(results, intgroup = "Time", returnData = TRUE)
install.packages("factoextra")
# Load packages
library(factoextra)
res.pca <- prcomp(miRNA, scale = TRUE)
fviz_eig(res.pca, col.var="blue")
res.pca <- prcomp(miRNA, scale = FALSE)
fviz_eig(res.pca, col.var="blue")
res.pca <- prcomp(miRNA, scale = TRUE)
fviz_eig(res.pca, col.var="blue")
summary(res.pca)
var <- get_pca_var(res.pca)
fviz_pca_ind(res.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("darkorchid4", "gold", "darkorange"),
repel = TRUE
)
autoplot(res.pca, data=kmeans, colour="cluster")
autoplot(res.pca)
install.packages("ggfortify")
# Load packages
library(ggfortify)
autoplot(res.pca)
View(miRNA)
plotPCA(vsdata, intgroup = "Time")
?plotPCA
pcaData <- plotPCA(vsd, intgroup=c("condition", "type"), returnData=TRUE)
pcaData <- plotPCA(vsdata, intgroup=c("condition", "type"), returnData=TRUE)
pcaData <- plotPCA(vsdata, intgroup=c"Time", returnData=TRUE)
pcaData <- plotPCA(vsdata, intgroup="Time", returnData=TRUE)
View(pcaData)
BiocManager::install("pcaExplorer")
library(pcaExplorer)
library(pcaExplorer)
detach("package:tidyverse", unload=TRUE)
.rs.restartR()
library(pcaExplorer)
# Load packages
library(ggfortify)
library(factoextra)
library(readr)
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
pcaExplorer(dds = dds, dst = vsdata)
# Load packages
library(ggfortify)
library(pcaExplorer)
library(factoextra)
library(readr)
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
# Load Data
X2023_Rasagiline <- read_excel("OneDrive/Research/2022-Rasagiline-miRNA-Metabolome Research/2023-Rasagiline/2023_Rasagiline.xlsx") %>% as.data.frame()
row.names(X2023_Rasagiline) <- X2023_Rasagiline$Gene
X2023_Rasagiline <- X2023_Rasagiline[,2:101]
miRNA <- X2023_Rasagiline %>% as.matrix()
row.names(miRNA) <- row.names(X2023_Rasagiline)
# miRNA detected in less than half participants of the cohort is regarded as not efficiently detected
miRNA <- miRNA[rowMedians(miRNA) > 0,]
# For remaining undetected miRNA,
# Their values shall be assigned as half of the minimum value of the detected target miRNA
miRNA[miRNA == 0] <- NA
nas <- which(is.na(miRNA), arr.ind = TRUE)
# 1 is added to avoid the possible production of unwanted 0s
miRNA[nas] <- round((rowMins(miRNA, na.rm = TRUE) [nas[,1]]+1)/2)
miRNA <- miRNA %>% as.data.frame()
# DESeq2 for treatment
library(DESeq2)
library(zoo)
Time <- c(replicate(50, "Before"), replicate(50, "After"))
coldata <- cbind(c(colnames(miRNA)), Time) %>% as.data.frame()
row.names(coldata) <- coldata$V1
colnames(coldata) <- c("Number", "Time")
dds <- DESeqDataSetFromMatrix(countData = miRNA, colData = coldata, design = ~Time)
dds$Time <- relevel(dds$Time, "Before", "After")
dds <- DESeq(dds)
res <- results(dds)
results <- res %>% as.data.frame()
results <- results %>%
mutate(miRNA = row.names(results))
results$miRNA <- gsub(".*_","",results$miRNA)
results$Rank = results$log2FoldChange * abs(log10(results$padj))
# PCA
vsdata <- varianceStabilizingTransformation(dds, blind = FALSE)
plotPCA(vsdata, intgroup = "Time")
pcaExplorer(dds = dds, dst = vsdata)
# Load packages
library(ggfortify)
library(pcaExplorer)
library(factoextra)
library(readr)
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
# Load Data
X2023_Rasagiline <- read_excel("2023_Rasagiline.xlsx") %>% as.data.frame()
# Load library
library(readr)
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
# Load Data
miRNA_2020 <- read_excel("OneDrive/Research/2022-Rasagiline-miRNA-Metabolome Research/2020/2020.xlsx", col_names = FALSE,
skip = 9) %>% as.data.frame()
colnames(miRNA_2020) <- c("miRNA", c(1:100))
row.names(miRNA_2020) <- miRNA_2020$miRNA
miRNA_2020 <- miRNA_2020[,-1]
# Prepare data for DESeq2 analysis
min(miRNA_2020[miRNA_2020 > 0])
miRNA <- apply(miRNA_2020, 2, as.numeric)
miRNA <- 1000 * miRNA
miRNA <- apply(miRNA, 2, as.integer)
row.names(miRNA) <- row.names(miRNA_2020)
# Remove miRNA detected in less than half participants of the cohort
miRNA <- miRNA[rowMedians(miRNA) > 0,]
# For remaining undetected miRNA,
# Their values shall be assigned as half of the minimum value of the detected target miRNA
miRNA[miRNA == 0] <- NA
nas <- which(is.na(miRNA), arr.ind = TRUE)
miRNA[nas] <- round((rowMins(miRNA, na.rm = TRUE) [nas[,1]]+1)/2)
miRNA <- miRNA %>% as.data.frame()
# DESeq2
library(DESeq2)
coldata <- cbind(colnames(miRNA), c(replicate(50, "PD"), replicate(50, "HC")))
colnames(coldata) <- c("Patient", "Disease")
dds <- DESeq2::DESeqDataSetFromMatrix(countData = miRNA, colData = coldata, design = ~Disease)
dds$Disease <- relevel(dds$Disease, "HC", "PD")
dds <- DESeq2::DESeq(dds)
res <- results(dds)
results <- res %>% as.data.frame()
results <- results %>%
mutate(miRNA = row.names(results))
results$miRNA <- gsub(".*_","",results$miRNA)
View(results)
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
# Load data
mirna_2019 <- read_excel("OneDrive/Research/2022-Rasagiline-miRNA-Metabolome Research/2019/2019_miRNA_Re_validation/2019.xlsx", sheet = "RPM2",
skip = 8)
# Remove PD patient 13 and patient 15 for failure in meeting cohort admission standard
mirna_2019 <- mirna_2019[-1,] %>%
select(miRNA, J1:J12, J14, J16:J42) %>%
as.data.frame()
row.names(mirna_2019) <- mirna_2019$miRNA
# Trim data for DESeq2 analysis
mirna <- mirna_2019[,-1] %>% as.matrix()
mirna <- apply(mirna, 2, as.numeric)
mirna <- 1000 * mirna
mirna <- apply(mirna, 2, as.integer)
row.names(mirna) <- row.names(mirna_2019)
# Remove miRNA detected in less than half participants of the cohort
mirna <- mirna[rowMedians(mirna) > 0,]
# For remaining undetected miRNA,
# Their values shall be assigned as half of the minimum value of the detected target miRNA
mirna[mirna == 0] <- NA
nas <- which(is.na(mirna), arr.ind = TRUE)
mirna[nas] <- round((rowMins(mirna, na.rm = TRUE) [nas[,1]]+1)/2)
# Load data
mirna_2019 <- read_excel("OneDrive/Research/2022-Rasagiline-miRNA-Metabolome Research/2019/2019_miRNA_Re_validation/2019.xlsx", sheet = "RPM2",
skip = 8)
function (object, contrast, name, lfcThreshold = 0, altHypothesis = c("greaterAbs",
"lessAbs", "greater", "less"), listValues = c(1, -1), cooksCutoff,
independentFiltering = TRUE, alpha = 0.1, filter, theta,
pAdjustMethod = "BH", filterFun, format = c("DataFrame",
"GRanges", "GRangesList"), saveCols = NULL, test, addMLE = FALSE,
tidy = FALSE, parallel = FALSE, BPPARAM = bpparam(), minmu = 0.5)
# Remove PD patient 13 and patient 15 for failure in meeting cohort admission standard
mirna_2019 <- mirna_2019[-1,] %>%
select(miRNA, J1:J12, J14, J16:J42) %>%
as.data.frame()
row.names(mirna_2019) <- mirna_2019$miRNA
# Trim data for DESeq2 analysis
mirna <- mirna_2019[,-1] %>% as.matrix()
mirna <- apply(mirna, 2, as.numeric)
mirna <- 1000 * mirna
mirna <- apply(mirna, 2, as.integer)
row.names(mirna) <- row.names(mirna_2019)
# Remove miRNA detected in less than half participants of the cohort
mirna <- mirna[rowMedians(mirna) > 0,]
# For remaining undetected miRNA,
# Their values shall be assigned as half of the minimum value of the detected target miRNA
mirna[mirna == 0] <- NA
nas <- which(is.na(mirna), arr.ind = TRUE)
mirna[nas] <- round((rowMins(mirna, na.rm = TRUE) [nas[,1]]+1)/2)
mirna <- mirna %>% as.data.frame()
# DESeq2
library(DESeq2)
colData <- cbind(c(colnames(mirna)), c(replicate(19,"PD"),replicate(21,"HC")))
colnames(colData) <- c("Patient","Disease")
dds <- DESeqDataSetFromMatrix(countData = mirna, colData = colData, design = ~Disease)
dds$Disease <- relevel(dds$Disease, ref = "HC")
dds <- DESeq(dds)
res <- results(dds)
# Visualization
vsdata <- vst(dds, blind = FALSE)
plotPCA(vsdata, intgroup = "Disease")
results <- res %>%  as.data.frame()
View(colData)
Miyamoto <- results[results$padj <= 0.05,]
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
# Load data
mirna_2019 <- read_excel("OneDrive/Research/2022-Rasagiline-miRNA-Metabolome Research/2019/2019_miRNA_Re_validation/2019.xlsx", sheet = "RPM2",
skip = 8)
# Remove PD patient 13 and patient 15 for failure in meeting cohort admission standard
mirna_2019 <- mirna_2019[-1,] %>%
select(miRNA, J1:J12, J14, J16:J42) %>%
as.data.frame()
row.names(mirna_2019) <- mirna_2019$miRNA
# Trim data for DESeq2 analysis
mirna <- mirna_2019[,-1] %>% as.matrix()
mirna <- apply(mirna, 2, as.numeric)
mirna <- 1000 * mirna
mirna <- apply(mirna, 2, as.integer)
row.names(mirna) <- row.names(mirna_2019)
# Remove miRNA detected in less than half participants of the cohort
mirna <- mirna[rowMedians(mirna) > 0,]
# For remaining undetected miRNA,
# Their values shall be assigned as half of the minimum value of the detected target miRNA
mirna[mirna == 0] <- NA
nas <- which(is.na(mirna), arr.ind = TRUE)
mirna[nas] <- round((rowMins(mirna, na.rm = TRUE) [nas[,1]]+1)/2)
nas <- which(is.na(mirna), arr.ind = TRUE)
mirna[nas] <- round((rowMins(mirna, na.rm = TRUE) [nas[,1]]+1)/2)
mirna[nas] <- round((rowMins(mirna, na.rm = TRUE) [nas[,1]]+1)/2)]
mirna[nas] <- round((rowMins(mirna, na.rm = TRUE) [nas[,1]]+1)/2)])
mirna[nas] <- round((rowMins(mirna, na.rm = TRUE) [nas[,1]]+1)/2)
mirna[nas] <- round((rowMins(mirna, na.rm = TRUE) [nas[,1]]+1)/2)
mirna[nas] <- round((rowMins(mirna, na.rm = TRUE,useNames = TRUE) [nas[,1]]+1)/2)
mirna <- mirna %>% as.data.frame()
View(mirna)
# DESeq2
library(DESeq2)
colData <- cbind(c(colnames(mirna)), c(replicate(19,"PD"),replicate(21,"HC")))
colnames(colData) <- c("Patient","Disease")
dds <- DESeqDataSetFromMatrix(countData = mirna, colData = colData, design = ~Disease)
dds$Disease <- relevel(dds$Disease, ref = "HC")
dds <- DESeq(dds)
res <- results(dds)
View(res)
View(res)
res <- results(dds)
colnames(colData) <- c("Patient","Disease")
dds <- DESeqDataSetFromMatrix(countData = mirna, colData = colData, design = ~Disease)
dds$Disease <- relevel(dds$Disease, ref = "HC")
dds <- DESeq(dds)
res <- results(dds)
colData <- cbind(c(colnames(mirna)), c(replicate(19,"PD"),replicate(21,"HC")))
colnames(colData) <- c("Patient","Disease")
dds <- DESeqDataSetFromMatrix(countData = mirna, colData = colData, design = ~Disease)
dds$Disease <- relevel(dds$Disease, ref = "HC")
dds <- DESeq(dds)
res <- results(dds)
View(res)
# Visualization
vsdata <- vst(dds, blind = FALSE)
plotPCA(vsdata, intgroup = "Disease")
results <- res %>%  as.data.frame()
View(results)
View(results)
View(results)
# Load packages
library(readr)
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
# Load Data
X2022_rasagiline <- read_csv("AMED-2022-Rasagiline-Before-After.csv") %>% as.data.frame()
setwd("~/Documents/AMED-Rasagiline-miRNA-Research-Project/2022")
# Load packages
library(readr)
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
# Load Data
X2022_rasagiline <- read_csv("AMED-2022-Rasagiline-Before-After.csv") %>% as.data.frame()
row.names(X2022_rasagiline) <- X2022_rasagiline$Gene
# Select the 47 PD patients with exosome miRNA data for both before
# and after rasagiline treatment
X2022_rasagiline <- X2022_rasagiline[,2:95]
# Remove PD10, who did not receive rasailine treatment
X2022_rasagiline <- X2022_rasagiline[,-19:-20]
miRNA <- X2022_rasagiline %>% as.matrix()
row.names(miRNA) <- row.names(X2022_rasagiline)
# miRNA detected in less than half participants of the cohort is regarded as not efficiently detected
miRNA <- miRNA[rowMedians(miRNA) > 0,]
# For remaining undetected miRNA,
# Their values shall be assigned as half of the minimum value of the detected target miRNA
miRNA[miRNA == 0] <- NA
nas <- which(is.na(miRNA), arr.ind = TRUE)
# 1 is added to avoid the possible production of unwanted 0s
miRNA[nas] <- round((rowMins(miRNA, na.rm = TRUE, useNames = TRUE) [nas[,1]]+1)/2)
miRNA <- miRNA %>% as.data.frame()
# DESeq2 for treatment
library(DESeq2)
library(zoo)
Time <- c(replicate(46,c("Before","After")))
Clinical_data <- read_excel("Clinical-Parameters.xlsx", col_names = FALSE)
Therapy <- Clinical_data[1, 2:95] %>% unlist() %>% na.locf()
Therapy <- Therapy[-19:-20]
Gender <- Clinical_data[2, 2:95] %>% unlist() %>% na.locf()
Gender <- Gender[-19:-20]
HY <- Clinical_data[4,2:95] %>% unlist() %>%  na.locf()
HY <- HY[-19:-20]
HY <- recode(HY, "1" = "I", "2" = "II", "3" = "III")
Age <- Clinical_data[3, 2:95] %>% unlist() %>% as.numeric() %>% na.locf()
for (i in c(1:length(Age))) {
Age[i] <- if_else( Age[i] < 60, "<60", if_else(Age[i] >70, ">70", "60~70"))
}
Age <- Age[-19:-20]
coldata <- cbind(c(colnames(miRNA)), Time, Gender, HY, Age, Therapy) %>% as.data.frame()
row.names(coldata) <- coldata$V1
colnames(coldata) <- c("Number", "Time", "Gender", "HY", "Age", "Therapy")
dds <- DESeqDataSetFromMatrix(countData = miRNA, colData = coldata, design = ~Time)
dds$Time <- relevel(dds$Time, "Before", "After")
dds <- DESeq(dds)
res <- results(dds)
results <- res %>% as.data.frame()
results <- results %>%
mutate(miRNA = row.names(results))
results$miRNA <- gsub(".*_","",results$miRNA)
results$Rank = results$log2FoldChange * abs(log10(results$padj))
# PCA
library(pcaExplorer)
vsdata <- varianceStabilizingTransformation(dds, blind = FALSE)
plotPCA(vsdata, intgroup = "Time")
plotPCA(vsdata, intgroup = "Gender")
plotPCA(vsdata, intgroup = "HY")
plotPCA(vsdata, intgroup = "Age")
plotPCA(vsdata, intgroup = "Therapy")
pcaExplorer(dds = dds, coldata = coldata, dst = dst)
# Load packages
library(readr)
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
# Load Data
X2022_rasagiline <- read_csv("AMED-2022-Rasagiline-Before-After.csv") %>% as.data.frame()
row.names(X2022_rasagiline) <- X2022_rasagiline$Gene
# Select the 47 PD patients with exosome miRNA data for both before
# and after rasagiline treatment
X2022_rasagiline <- X2022_rasagiline[,2:95]
# Remove PD10, who did not receive rasailine treatment
X2022_rasagiline <- X2022_rasagiline[,-19:-20]
miRNA <- X2022_rasagiline %>% as.matrix()
row.names(miRNA) <- row.names(X2022_rasagiline)
# miRNA detected in less than half participants of the cohort is regarded as not efficiently detected
miRNA <- miRNA[rowMedians(miRNA) > 0,]
# For remaining undetected miRNA,
# Their values shall be assigned as half of the minimum value of the detected target miRNA
miRNA[miRNA == 0] <- NA
nas <- which(is.na(miRNA), arr.ind = TRUE)
# 1 is added to avoid the possible production of unwanted 0s
miRNA[nas] <- round((rowMins(miRNA, na.rm = TRUE, useNames = TRUE) [nas[,1]]+1)/2)
miRNA <- miRNA %>% as.data.frame()
# DESeq2 for treatment
library(DESeq2)
library(zoo)
Time <- c(replicate(46,c("Before","After")))
Clinical_data <- read_excel("Clinical-Parameters.xlsx", col_names = FALSE)
Therapy <- Clinical_data[1, 2:95] %>% unlist() %>% na.locf()
Therapy <- Therapy[-19:-20]
Gender <- Clinical_data[2, 2:95] %>% unlist() %>% na.locf()
Gender <- Gender[-19:-20]
HY <- Clinical_data[4,2:95] %>% unlist() %>%  na.locf()
HY <- HY[-19:-20]
HY <- recode(HY, "1" = "I", "2" = "II", "3" = "III")
Age <- Clinical_data[3, 2:95] %>% unlist() %>% as.numeric() %>% na.locf()
for (i in c(1:length(Age))) {
Age[i] <- if_else( Age[i] < 60, "<60", if_else(Age[i] >70, ">70", "60~70"))
}
Age <- Age[-19:-20]
coldata <- cbind(c(colnames(miRNA)), Time, Gender, HY, Age, Therapy) %>% as.data.frame()
row.names(coldata) <- coldata$V1
colnames(coldata) <- c("Number", "Time", "Gender", "HY", "Age", "Therapy")
dds <- DESeqDataSetFromMatrix(countData = miRNA, colData = coldata, design = ~Time)
dds$Time <- relevel(dds$Time, "Before", "After")
dds <- DESeq(dds)
res <- results(dds)
results <- res %>% as.data.frame()
results <- results %>%
mutate(miRNA = row.names(results))
results$miRNA <- gsub(".*_","",results$miRNA)
results$Rank = results$log2FoldChange * abs(log10(results$padj))
# PCA
library(pcaExplorer)
vsdata <- varianceStabilizingTransformation(dds, blind = FALSE)
plotPCA(vsdata, intgroup = "Time")
plotPCA(vsdata, intgroup = "Gender")
plotPCA(vsdata, intgroup = "HY")
plotPCA(vsdata, intgroup = "Age")
plotPCA(vsdata, intgroup = "Therapy")
pcaExplorer(dds = dds, dst = vsdata)
# Load packages
library(readr)
library(readxl)
library(dplyr)
library(matrixStats)
library(ggplot2)
# Load Data
X2022_rasagiline <- read_csv("AMED-2022-Rasagiline-Before-After.csv") %>% as.data.frame()
row.names(X2022_rasagiline) <- X2022_rasagiline$Gene
# Select the 47 PD patients with exosome miRNA data for both before
# and after rasagiline treatment
X2022_rasagiline <- X2022_rasagiline[,2:95]
# Remove PD10, who did not receive rasailine treatment
X2022_rasagiline <- X2022_rasagiline[,-19:-20]
miRNA <- X2022_rasagiline %>% as.matrix()
row.names(miRNA) <- row.names(X2022_rasagiline)
# miRNA detected in less than half participants of the cohort is regarded as not efficiently detected
miRNA <- miRNA[rowMedians(miRNA) > 0,]
# For remaining undetected miRNA,
# Their values shall be assigned as half of the minimum value of the detected target miRNA
miRNA[miRNA == 0] <- NA
nas <- which(is.na(miRNA), arr.ind = TRUE)
# 1 is added to avoid the possible production of unwanted 0s
miRNA[nas] <- round((rowMins(miRNA, na.rm = TRUE, useNames = TRUE) [nas[,1]]+1)/2)
miRNA <- miRNA %>% as.data.frame()
# DESeq2 for treatment
library(DESeq2)
library(zoo)
Time <- c(replicate(46,c("Before","After")))
Clinical_data <- read_excel("Clinical-Parameters.xlsx", col_names = FALSE)
Therapy <- Clinical_data[1, 2:95] %>% unlist() %>% na.locf()
Therapy <- Therapy[-19:-20]
Gender <- Clinical_data[2, 2:95] %>% unlist() %>% na.locf()
Gender <- Gender[-19:-20]
HY <- Clinical_data[4,2:95] %>% unlist() %>%  na.locf()
HY <- HY[-19:-20]
HY <- recode(HY, "1" = "I", "2" = "II", "3" = "III")
Age <- Clinical_data[3, 2:95] %>% unlist() %>% as.numeric() %>% na.locf()
for (i in c(1:length(Age))) {
Age[i] <- if_else( Age[i] < 60, "<60", if_else(Age[i] >70, ">70", "60~70"))
}
Age <- Age[-19:-20]
coldata <- cbind(c(colnames(miRNA)), Time, Gender, HY, Age, Therapy) %>% as.data.frame()
row.names(coldata) <- coldata$V1
colnames(coldata) <- c("Number", "Time", "Gender", "HY", "Age", "Therapy")
dds <- DESeqDataSetFromMatrix(countData = miRNA, colData = coldata, design = ~Time)
dds$Time <- relevel(dds$Time, "Before", "After")
dds <- DESeq(dds)
res <- results(dds)
results <- res %>% as.data.frame()
results <- results %>%
mutate(miRNA = row.names(results))
results$miRNA <- gsub(".*_","",results$miRNA)
results$Rank = results$log2FoldChange * abs(log10(results$padj))
# PCA
library(pcaExplorer)
vsdata <- varianceStabilizingTransformation(dds, blind = FALSE)
plotPCA(vsdata, intgroup = "Time")
plotPCA(vsdata, intgroup = "Gender")
plotPCA(vsdata, intgroup = "HY")
plotPCA(vsdata, intgroup = "Age")
plotPCA(vsdata, intgroup = "Therapy")
pcaExplorer(dds = dds, dst = vsdata)
# DEG
miRNA_Sig_In <- results[results$log2FoldChange > 0 & results$padj <= 0.05, ]
miRNA_Sig_De <- results[results$log2FoldChange < 0 & results$padj <= 0.05, ]
write.csv(miRNA_Sig_In, "Increased-miRNA.csv")
write.csv(miRNA_Sig_De, "Decreased-miRNA.csv")
View(results)
# VolcanoPlot
library(EnhancedVolcano)
EnhancedVolcano(results, x = "log2FoldChange", y = "padj", lab = results$miRNA,
pCutoff = 0.05, FCcutoff = 1, legendIconSize = 5, title = NULL,
subtitle = NULL, gridlines.major = FALSE, gridlines.minor = FALSE, selectLab = FALSE, legendLabels = c("NS", "FC", "pval", "FC&pval"))
write.csv(miRNA, "Rasagiline_2022_Trimmed.csv")
write.csv(results, "Results.csv")
write.csv(miRNA, "Countdata_Trimmed.csv")
write.csv(results, "GSEA-Raw-Data")
